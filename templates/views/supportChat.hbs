<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    CHATTT

    <div class="sidebar">
        <ul class="users" id="users">

        </ul>
    </div>

    <div class="chat-board">
        <h1 id="chat-board-title">
            Selecciona a un cliente para iniciar el chat
        </h1>
        <div class="" id="messages">

        </div>
    </div>

    <form action="" class="support-chat__form" id="support-chat__form">
        <input type="text" name="supportMessage" id="message-input">
        <button type="submit">Submit</button>
    </form>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        // Elementos
        const usersList = document.getElementById('users')
        const chatTitle = document.getElementById('chat-board-title')

        // Helper functions
        const addTabUserListener = (element, username) => {
            element.addEventListener('click', () => {
                chatTitle.innerHTML = username
            })
        }

        const createUserTab = ({ username }) => {
            // Agregar elemento a la lista de usuarios
            // crear elemento
            const newUser = document.createElement('li')
            // agregar clase para estilos y id que es el nombre del canal (socket)
            newUser.classList.add('users__user')
            newUser.id = username
            newUser.innerHTML = username
            // Agregar elemento a elemento ul
            usersList.appendChild(newUser)
            // Agregar click event al nuevo tab
            addTabUserListener(newUser, username)
        }


        var socket = io();
        const clients = [] 

        //Entrar a chat de soporte
        socket.emit('join', { username: 'Carlos', rol: 'support'})

        // Descargar usuarios activos
        socket.on('supportJoin', (users) => {
            users.forEach(user => createUserTab(user))
        })

        // Cliente crea chat
        socket.on('clientJoin', (user) => {
            createUserTab(user)
        })

        // Cliente cierra el chat
        socket.on('clientLeft', (user) => {
            const userElement = document.getElementById(user.username)
            userElement.remove()
        })

        //Enviar mensaje
        const supportChatForm = document.getElementById('support-chat__form')
        supportChatForm.addEventListener('submit', (e) => {
            e.preventDefault()

            const username = chatTitle.innerHTML
            const message = e.target.elements.supportMessage.value
            socket.emit('sendMessage', { to: { username, rol: 'client'}, message })
        })


        // Recibir mensaje
        socket.on('newMessage', function(msg) {
            console.log(msg)
        });
    </script>
</body>
</html>