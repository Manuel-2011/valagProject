<div class="client-chat username minimized" id="client-chat-tab">
  <div class="client-chat__notification" id="client-chat-notification">
    Nuevo mensaje
    <span class="client-chat__notification__icon"><ion-icon name="add"></ion-icon></span>
  </div>
  <div class="client-chat__controls">
    <button class="client-chat__close" id="client-chat-close">&times;</button>
    <button class="client-chat__open" id="client-chat-open"><ion-icon name="caret-up"></ion-icon></button>
  </div>
  <div class="client-chat__header" id="client-chat-header">Chatea con un asesor</div>
  <div class="client-chat__chat-board" id="messages"></div>
  <form class="client-chat__message-form" id="form" action="">
    <input class="client-chat__message-input" id="input" autocomplete="off" />
    <button class="client-chat__message-submit" type="submit"><ion-icon name="send"></ion-icon></button>
  </form>


  <form action="" class="client-chat__username-form" id="username-client-form">
    <label class="client-chat__username-label" for="username-client-input">Usuario</label>
    <input class="client-chat__username-input" name="username" type="text" id="username-client-input" placeholder="Pon tu nombre para iniciar el chat" required>
    <div class="client-chat__username-error" id="client-chat-username-error"></div>
    <div class="custom-select">
      <select name="" id="supportType" required>
        <option value="0">Tipo de ayuda:</option>
        <option value="tecnico">Soporte Técnico</option>
        <option value="administrativo">Soporte Administrativo</option>
      </select>
    </div>
    <button class="client-chat__username-submit btn-card" type="submit">Enviar</button>
  </form>

</div>

<script src="/socket.io/socket.io.js"></script>
<script>
  var socket = io();
  // variable global con nombre de usuario
  let username
// variable global con tipo de soporte
  let supportType

  // Elementos
  const chatTab = document.getElementById('client-chat-tab')
  const clientChat = document.getElementById('messages');
  const clientMessageForm = document.getElementById('form');
  const clientMessageInput = document.getElementById('input');

  const $usernameClientForm = document.getElementById('username-client-form')
  const usernameClientError = document.getElementById('client-chat-username-error')

  const closeClientChat = document.getElementById('client-chat-close')
  const openClientChat = document.getElementById('client-chat-open')
  const headerClientChat = document.getElementById('client-chat-header')

  const notification = document.getElementById('client-chat-notification')

  // Helper function
  const clientAddNewMessage = (message, username) => {
      const messageBox = document.createElement('div')
      messageBox.classList.add('client-chat__message-box')

      const newMessage = document.createElement('p')
      newMessage.classList.add('client-chat__message')
      // Agregar clase a elemento dependiendo si es el cliente o soporte
      if (message.username === username) {
          messageBox.classList.add('client-chat__message-box--client')
          newMessage.classList.add('client-chat__message--client')
      } else {
          messageBox.classList.add('client-chat__message-box--support')
          newMessage.classList.add('client-chat__message--support')
      }
      // Agregar contenido del texto
      newMessage.innerText = message.text
      // Agregar mensaje al chat
      messageBox.appendChild(newMessage)
      clientChat.appendChild(messageBox)
      //auto scroll
      autoscroll()
  }

  const autoscroll = () => {
    // New message element
    const newMessage = clientChat.lastElementChild

    // Height of the new message
    const newMessageHeight = newMessage.offsetHeight

    // Visible height
    const visibleHeight = clientChat.offsetHeight

    // Height of messages container
    const containerHeight = clientChat.scrollHeight

    // How far have i scrolled?
    const scrollOffset = clientChat.scrollTop + visibleHeight

    if (containerHeight - newMessageHeight <= scrollOffset) {
        clientChat.scrollTop = clientChat.scrollHeight
    }
  }

  // Event listener de enviar mensaje
  form.addEventListener('submit', function(e) {
    e.preventDefault();
    if (input.value) {
      socket.emit('sendMessage', { to: {rol: 'support'}, message: input.value}, (error) => {
        input.value = '';

        if (error) {
          if (error === 'UsernameInvalid') {
            return clientAddNewMessage({text: 'Lo siento! Solo puede tener un chat activo al tiempo. Regrese a la anterior pestaña!'})
          }
          return
        }
      });
      
    }
  });


  // Submit username form del chat
  $usernameClientForm.addEventListener('submit', (e) => {
    e.preventDefault()

    username = e.target.elements.username.value.toLowerCase().trim()
    supportType = e.target.elements.supportType.value
    // crear el chat con soporte
    socket.emit('join', { username, rol: 'client', supportType}, (error) => {
      if (error) {
        if (error === 'UsernameInvalid') {
          return usernameClientError.innerHTML = 'El nombre de usuario está en uso. Por favor pruebe con otro!'
        } else if (error === 'supportType empty') {
          return usernameClientError.innerHTML = 'Selecciona el tipo de soporte!'
        } else if (error === 'noSupportAgents') {
          // esconder la username-form y mostrar el chat
          chatTab.classList.remove('username')
          chatTab.classList.add('chat')

          // Mostrar mensaje de error
          clientAddNewMessage({text: 'Lo siento! En este momento no hay asesores disponibles. Por favor, intenta más tarde.'}, 'support')
          // Crear evento para cuando alguien de soporte se conecte
          socket.on('agentAvailable', (agentSupportType) => {
            if (agentSupportType === supportType) {
              clientAddNewMessage({text: 'Nuestros asesores ya se encuentran listos para atenderte!'}, 'support')
            }
          })
          return 
        }
        return
      }

      // esconder la username-form y mostrar el chat
      chatTab.classList.remove('username')
      chatTab.classList.add('chat')
    })
  })

  socket.on('newMessage', function(msg) {
    clientAddNewMessage(msg, username)

    // Dejar notificacion en caso de tener el chat minimizado
    if (chatTab.classList.contains('minimized')) {
      notification.classList.add('active')
    }
  });


  // MINIMIZAR Y AMPLIAR VENTANA DE CHAT

  // ampliar ventana de chat
  openClientChat.addEventListener('click', (e) => {
    chatTab.classList.remove('minimized')
    // Eliminar notificacion si la hay
    notification.classList.remove('active')

    e.stopPropagation()
  })
  // minimizar ventana de chat
  closeClientChat.addEventListener('click', (e) => {
    chatTab.classList.add('minimized')

    e.stopPropagation()
  })
  // Minimizar o ampliar cuando se haga click la ventana del chat
  chatTab.addEventListener('click', () => {
    if (chatTab.classList.contains('minimized')) {
      chatTab.classList.remove('minimized')
      // Eliminar notificacion si la hay
      notification.classList.remove('active')
    } else {
      chatTab.classList.add('minimized')
    }
  })

  // No minimzar chat si click se hace sobre el tablero del chat
  clientChat.addEventListener('click', e => {
    e.stopPropagation()
  })
  // No minimzar chat si click se hace sobre el chat form
  clientMessageForm.addEventListener('click', e => {
    e.stopPropagation()
  })
  // No minimizar el chat si el click se hace sobre el user form
  $usernameClientForm.addEventListener('click', (e) => {
    e.stopPropagation()
  });






  //////////////////////////////////////////
  // CUSTOM SELECT CODE





  var x, i, j, l, ll, selElmnt, a, b, c;
/* Look for any elements with the class "custom-select": */
x = document.getElementsByClassName("custom-select");
l = x.length;
for (i = 0; i < l; i++) {
  selElmnt = x[i].getElementsByTagName("select")[0];
  ll = selElmnt.length;
  /* For each element, create a new DIV that will act as the selected item: */
  a = document.createElement("DIV");
  a.setAttribute("class", "select-selected");
  a.innerHTML = selElmnt.options[selElmnt.selectedIndex].innerHTML;
  x[i].appendChild(a);
  /* For each element, create a new DIV that will contain the option list: */
  b = document.createElement("DIV");
  b.setAttribute("class", "select-items select-hide");
  for (j = 1; j < ll; j++) {
    /* For each option in the original select element,
    create a new DIV that will act as an option item: */
    c = document.createElement("DIV");
    c.innerHTML = selElmnt.options[j].innerHTML;
    c.addEventListener("click", function(e) {
        /* When an item is clicked, update the original select box,
        and the selected item: */
        var y, i, k, s, h, sl, yl;
        s = this.parentNode.parentNode.getElementsByTagName("select")[0];
        sl = s.length;
        h = this.parentNode.previousSibling;
        for (i = 0; i < sl; i++) {
          if (s.options[i].innerHTML == this.innerHTML) {
            s.selectedIndex = i;
            h.innerHTML = this.innerHTML;
            y = this.parentNode.getElementsByClassName("same-as-selected");
            yl = y.length;
            for (k = 0; k < yl; k++) {
              y[k].removeAttribute("class");
            }
            this.setAttribute("class", "same-as-selected");
            break;
          }
        }
        h.click();
    });
    b.appendChild(c);
  }
  x[i].appendChild(b);
  a.addEventListener("click", function(e) {
    /* When the select box is clicked, close any other select boxes,
    and open/close the current select box: */
    e.stopPropagation();
    closeAllSelect(this);
    this.nextSibling.classList.toggle("select-hide");
    this.classList.toggle("select-arrow-active");
  });
}

function closeAllSelect(elmnt) {
  /* A function that will close all select boxes in the document,
  except the current select box: */
  var x, y, i, xl, yl, arrNo = [];
  x = document.getElementsByClassName("select-items");
  y = document.getElementsByClassName("select-selected");
  xl = x.length;
  yl = y.length;
  for (i = 0; i < yl; i++) {
    if (elmnt == y[i]) {
      arrNo.push(i)
    } else {
      y[i].classList.remove("select-arrow-active");
    }
  }
  for (i = 0; i < xl; i++) {
    if (arrNo.indexOf(i)) {
      x[i].classList.add("select-hide");
    }
  }
}

/* If the user clicks anywhere outside the select box,
then close all select boxes: */
document.addEventListener("click", closeAllSelect);

</script>